{
	"React Component:Function": {
    "prefix": "rcf",
    "body": [
      "export function ${1:${TM_FILENAME_BASE/([^-]+)(-*)/${1:/capitalize}/g}}() {",
			"\t$2"
      "\treturn $3",
      "}"
    ]
  },
  "React Component:Function - Default": {
    "prefix": "rcf-d",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE/([^-]+)(-*)/${1:/capitalize}/g}}() {",
			"\t$2",
      "\treturn $3",
      "}",
    ]
  },
  "React Component:Function - Props": {
    "prefix": "rcf-p",
    "body": [
      "${2:export} ${3|interface,type|} ${1:${TM_FILENAME_BASE/([^-]+)(-*)/${1:/capitalize}/g}}Props {",
      "\t${4:prop}: ${5:string};",
      "}",
      "",
      "export function $1({ $4 }: $1Props) {",
			"\t$6"
      "\treturn $7",
      "}"
    ]
  },
  "React Component:Function - Default & Props": {
    "prefix": "rcf-dp",
    "body": [
      "${2:export} ${3|interface,type|} ${1:${TM_FILENAME_BASE/([^-]+)(-*)/${1:/capitalize}/g}}Props {",
      "\t${4:prop}: ${5:string}",
      "}",
      "",
      "export default function $1({ $4 }: $1Props) {",
			"\t$6",
      "\treturn $7",
      "}",
    ]
  },
  "React Component:Arrow Function": {
    "prefix": "rca",
    "body": [
      "export const ${1:${TM_FILENAME_BASE/([^-]+)(-*)/${1:/capitalize}/g}} = () => {",
			"\t$2"
      "\treturn $3",
      "}"
    ]
  },
  "React Component:Arrow Function - Default": {
    "prefix": "rca-d",
    "body": [
      "const ${1:${TM_FILENAME_BASE/([^-]+)(-*)/${1:/capitalize}/g}} = () => {",
			"\t$2"
      "\treturn $3",
      "}",
      "",
      "export default $1;"
    ]
  },
  "React Component:Arrow Function - Props": {
    "prefix": "rca-p",
    "body": [
      "${2:export} ${3|interface,type|} ${1:${TM_FILENAME_BASE/([^-]+)(-*)/${1:/capitalize}/g}}Props {",
      "\t${4:prop}: ${5:string}",
      "}",
      "",
      "export const $1 = ({ $4 }: $1Props) => {",
			"\t$6",
      "\treturn $7",
      "}"
    ]
  },
  "React Component:Arrow Function - Default & Props": {
    "prefix": "rca-dp",
    "body": [
      "${2:export} ${3|interface,type|} ${1:${TM_FILENAME_BASE/([^-]+)(-*)/${1:/capitalize}/g}}Props {",
      "\t${4:prop}: ${5:string}",
      "}",
      "",
      "const $1 = ({ $4 }: $1Props) => {",
			"\t$6",
      "\treturn $7",
      "}",
      "",
      "export default $1;"
    ]
  },
  "React useCallback": {
    "prefix": "rucb",
    "body": ["const $1 = useCallback(($4) => {", "\t$2", "}, [$3])"]
  },
  "React useContext": {
    "prefix": "ruct",
    "body": "const $1 = useContext$3($2);"
  },
  "React useDebugValue": {
    "prefix": "rudb",
    "body": "useDebugValue$2($1)"
  },
  "React useDeferredValue": {
    "prefix": "rudf",
    "body": "const $1 = useDeferredValue$3($2);"
  },
  "React useEffect": {
    "prefix": "rue",
    "body": ["useEffect(() => {", "\t$1", "}, [$2])"]
  },
  "React useEffect with return": {
    "prefix": "rue-r",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [$3])"
    ]
  },
  "React useImperativeHandle": {
    "prefix": "rui",
    "body": [
      "useImperativeHandle(${1:ref}, () => {",
      "\treturn {",
      "\t\t${2:method}() {",
      "\t\t\t$3",
      "\t\t}",
      "\t}",
      "}, [$4])"
    ]
  },
  "React useLayoutEffect": {
    "prefix": "rul",
    "body": ["useLayoutEffect(() => {", "\t$1", "}, [$2])"]
  },
  "React useMemo": {
    "prefix": "rum",
    "body": "const $1 = useMemo(() => $2, [$3])"
  },
  "React useReducer": {
    "prefix": "rurd",
    "body": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialArg}, ${5:init})"
  },
  "React useRef": {
    "prefix": "rurf",
    "body": "const $1 = useRef$3($2);"
  },
  "React useState": {
    "prefix": "rust",
    "body": "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState$3($2);"
  },
  "React useSyncExternalStore": {
    "prefix": "rusy",
    "body": "const $1 = useSyncExternalStore(${2:subscribe}, ${3:getSnapshot}, ${4:getServerSnapshot})"
  },
  "React useTransition": {
    "prefix": "rut",
    "body": "const [${1:isPending}, ${2:startTransition}] = useTransition();"
  }
}
